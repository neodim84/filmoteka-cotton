{"mappings":"YAAoBA,SAASC,cAAc,YAA3C,IAKIC,EAJEC,EAAoBH,SAASI,eAAe,eAC5CC,EAAYL,SAASC,cAAc,eACnCK,EAAaN,SAASC,cAAc,gBACtCM,EAAc,EAqLlB,SAASC,EAAgBC,GACH,IAAhBF,EACFF,EAAUK,UAAUC,IAAI,kBAExBN,EAAUK,UAAUE,OAAO,kBAGzBL,IAAgBE,EAClBH,EAAWI,UAAUC,IAAI,kBAEzBL,EAAWI,UAAUE,OAAO,iB,CAhDhCT,EAAkBU,iBAAiB,SAEnC,SAAuCC,GACrC,GAA0B,UAAtBA,EAAIC,OAAOC,QACb,OAEAR,EAAgBN,E","sources":["src/js/pagination1.js"],"sourcesContent":["const listElement = document.querySelector('.js-card');\nconst paginationElement = document.getElementById('#pagination');\nconst arrowLeft = document.querySelector('.arrow-left');\nconst arrowRight = document.querySelector('.arrow-right');\nlet currentPage = 1;\nlet pageCount;\nconst pagesOnWindow = 5;\nlet rows = 20;\n\nfunction resetCurrentPage() {\n  currentPage = 1;\n}\n\n// главная функция для рендера pagination. Callback-функция для работы с fetch (зависит от раздела, где рисуем pagination)\nexport function renderPagination(totalPages, listItems, callback, searchQuery) {\n  paginationElement.innerHTML = '';\n  resetCurrentPage();\n  arrowLeft.removeEventListener('click', onArrowLeftClick);\n  arrowRight.removeEventListener('click', onArrowRightClick);\n\n  function setupPagination(items, wrapper, rowsPerPage) {\n    wrapper.innerHTML = '';\n\n    pageCount = totalPages;\n    let maxLeftPage = currentPage - Math.floor(pagesOnWindow / 2);\n    let maxRightPage = currentPage + Math.floor(pagesOnWindow / 2);\n\n    if (maxLeftPage < 1) {\n      maxLeftPage = 1;\n      maxRightPage = pagesOnWindow;\n    }\n\n    if (maxRightPage > totalPages) {\n      maxLeftPage = totalPages - (pagesOnWindow - 1);\n\n      if (maxLeftPage < 1) {\n        maxLeftPage = 1;\n      }\n      maxRightPage = totalPages;\n    }\n\n    for (let i = 1; i <= totalPages; i++) {\n      if (maxLeftPage !== 1 && i == 1) {\n        let btn = paginationButton(i, items);\n        wrapper.appendChild(btn);\n      }\n\n      if (maxRightPage !== totalPages && i == totalPages) {\n        let btn = paginationButton(i, items);\n        wrapper.appendChild(btn);\n      }\n\n      if (i >= maxLeftPage && i <= maxRightPage) {\n        let btn = paginationButton(i, items);\n        wrapper.appendChild(btn);\n      }\n\n      // добавляет троеточие в pagination в зависимости от текущей страницы и общего к-ва страниц\n      if (\n        totalPages >= 6 &&\n        i == 1 &&\n        currentPage !== 1 &&\n        currentPage !== 2 &&\n        currentPage !== 3\n      ) {\n        const threeDotsEl = addThreeDotsBlock();\n        wrapper.insertBefore(threeDotsEl, wrapper[wrapper.length - 2]);\n      }\n\n      if (\n        pageCount >= 7 &&\n        i == pageCount - 1 &&\n        currentPage !== pageCount &&\n        currentPage !== pageCount - 2 &&\n        currentPage !== pageCount - 1\n      ) {\n        const threeDotsEl = addThreeDotsBlock();\n        wrapper.insertBefore(threeDotsEl, wrapper[1]);\n      }\n    }\n\n    placeholder.spinner.close();\n  }\n\n  // создает троеточия для pagination\n  function addThreeDotsBlock() {\n    const threeDots = document.createElement('div');\n    threeDots.classList.add('threedots');\n    threeDots.innerText = '...';\n    return threeDots;\n  }\n\n  function paginationButton(page, items) {\n    let button = document.createElement('button');\n    button.innerText = page;\n\n    if (currentPage == page) button.classList.add('active');\n\n    button.addEventListener('click', function () {\n      window.scrollTo({ top: 0, behavior: 'smooth' });\n      currentPage = page;\n      callback(listElement, currentPage, searchQuery);\n\n      let current_btn = document.querySelector('.pagenumbers button.active');\n      current_btn.classList.remove('active');\n\n      button.classList.add('active');\n      setupPagination(listItems, paginationElement, rows);\n      hideExtremeButtons(totalPages);\n    });\n\n    return button;\n  }\n\n  // функция для отслеживания кликов по стрелке влево\n  function onArrowLeftClick() {\n    if (currentPage > 1) {\n      window.scrollTo({ top: 0, behavior: 'smooth' });\n      currentPage--;\n      setupPagination(listItems, paginationElement, rows);\n      callback(listElement, currentPage, searchQuery);\n    }\n\n    disableArrowBtn(totalPages);\n    hideExtremeButtons(totalPages);\n  }\n\n  // функция для отслеживания кликов по стрелке вправо\n  function onArrowRightClick() {\n    if (currentPage < totalPages) {\n      window.scrollTo({ top: 0, behavior: 'smooth' });\n      currentPage++;\n      setupPagination(listItems, paginationElement, rows);\n      callback(listElement, currentPage, searchQuery);\n    }\n    disableArrowBtn(totalPages);\n    hideExtremeButtons(totalPages);\n  }\n\n  setupPagination(listItems, paginationElement, rows);\n  arrowLeft.onclick = onArrowLeftClick;\n  arrowRight.onclick = onArrowRightClick;\n\n  hideExtremeButtons(totalPages);\n  disableArrowBtn(totalPages);\n}\n\npaginationElement.addEventListener('click', disableArrowBtnAfterPageClick);\n\nfunction disableArrowBtnAfterPageClick(evt) {\n  if (evt.target.tagName != 'BUTTON') {\n    return;\n  } else {\n    disableArrowBtn(pageCount);\n  }\n}\n\n// прячет первую и последнюю страницу по бокам для мобильных гаджетов с маленьким экраном\nfunction hideExtremeButtons(totalPages) {\n  try {\n    if (\n      /Android|webOS|iPhone|iPad|BlackBerry|IEMobile|Opera Mini/i.test(\n        navigator.userAgent\n      )\n    ) {\n      // код для мобильных устройств\n      const allPaginationBtns = document.querySelectorAll('#pagination button');\n      if (currentPage > 3) {\n        allPaginationBtns[0].classList.add('hide');\n      } else {\n        allPaginationBtns[0].classList.remove('hide');\n      }\n\n      if (currentPage < totalPages - 3) {\n        allPaginationBtns[allPaginationBtns.length - 1].classList.add('hide');\n      } else {\n        allPaginationBtns[allPaginationBtns.length - 1].classList.remove(\n          'hide'\n        );\n      }\n    }\n  } catch (error) {}\n}\n\n// делает неактивными кнопки-стрелки на первой и последней  странице\nfunction disableArrowBtn(totalPages) {\n  if (currentPage === 1) {\n    arrowLeft.classList.add('disabled-arrow');\n  } else {\n    arrowLeft.classList.remove('disabled-arrow');\n  }\n\n  if (currentPage === totalPages) {\n    arrowRight.classList.add('disabled-arrow');\n  } else {\n    arrowRight.classList.remove('disabled-arrow');\n  }\n}\n"],"names":["document","querySelector","$aab4a74b07a1c2b2$var$pageCount","$aab4a74b07a1c2b2$var$paginationElement","getElementById","$aab4a74b07a1c2b2$var$arrowLeft","$aab4a74b07a1c2b2$var$arrowRight","$aab4a74b07a1c2b2$var$currentPage","$aab4a74b07a1c2b2$var$disableArrowBtn","totalPages","classList","add","remove","addEventListener","evt","target","tagName"],"version":3,"file":"index.d913eeb7.js.map"}